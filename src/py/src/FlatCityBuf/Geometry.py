# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatCityBuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Geometry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Geometry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGeometry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Geometry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Geometry
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Geometry
    def Lod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geometry
    def Solids(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Geometry
    def SolidsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Geometry
    def SolidsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Geometry
    def SolidsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Geometry
    def Shells(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Geometry
    def ShellsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Geometry
    def ShellsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Geometry
    def ShellsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Geometry
    def Surfaces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Geometry
    def SurfacesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Geometry
    def SurfacesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Geometry
    def SurfacesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Geometry
    def Strings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Geometry
    def StringsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Geometry
    def StringsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Geometry
    def StringsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Geometry
    def Boundaries(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Geometry
    def BoundariesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Geometry
    def BoundariesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Geometry
    def BoundariesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Geometry
    def Semantics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Geometry
    def SemanticsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Geometry
    def SemanticsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Geometry
    def SemanticsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Geometry
    def SemanticsObjects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = SemanticObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Geometry
    def SemanticsObjectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Geometry
    def SemanticsObjectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def GeometryStart(builder):
    builder.StartObject(9)

def Start(builder):
    GeometryStart(builder)

def GeometryAddType(builder, type):
    builder.PrependUint8Slot(0, type, 0)

def AddType(builder, type):
    GeometryAddType(builder, type)

def GeometryAddLod(builder, lod):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lod), 0)

def AddLod(builder, lod):
    GeometryAddLod(builder, lod)

def GeometryAddSolids(builder, solids):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(solids), 0)

def AddSolids(builder, solids):
    GeometryAddSolids(builder, solids)

def GeometryStartSolidsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSolidsVector(builder, numElems):
    return GeometryStartSolidsVector(builder, numElems)

def GeometryAddShells(builder, shells):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(shells), 0)

def AddShells(builder, shells):
    GeometryAddShells(builder, shells)

def GeometryStartShellsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShellsVector(builder, numElems):
    return GeometryStartShellsVector(builder, numElems)

def GeometryAddSurfaces(builder, surfaces):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(surfaces), 0)

def AddSurfaces(builder, surfaces):
    GeometryAddSurfaces(builder, surfaces)

def GeometryStartSurfacesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSurfacesVector(builder, numElems):
    return GeometryStartSurfacesVector(builder, numElems)

def GeometryAddStrings(builder, strings):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(strings), 0)

def AddStrings(builder, strings):
    GeometryAddStrings(builder, strings)

def GeometryStartStringsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStringsVector(builder, numElems):
    return GeometryStartStringsVector(builder, numElems)

def GeometryAddBoundaries(builder, boundaries):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(boundaries), 0)

def AddBoundaries(builder, boundaries):
    GeometryAddBoundaries(builder, boundaries)

def GeometryStartBoundariesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBoundariesVector(builder, numElems):
    return GeometryStartBoundariesVector(builder, numElems)

def GeometryAddSemantics(builder, semantics):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(semantics), 0)

def AddSemantics(builder, semantics):
    GeometryAddSemantics(builder, semantics)

def GeometryStartSemanticsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSemanticsVector(builder, numElems):
    return GeometryStartSemanticsVector(builder, numElems)

def GeometryAddSemanticsObjects(builder, semanticsObjects):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(semanticsObjects), 0)

def AddSemanticsObjects(builder, semanticsObjects):
    GeometryAddSemanticsObjects(builder, semanticsObjects)

def GeometryStartSemanticsObjectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSemanticsObjectsVector(builder, numElems):
    return GeometryStartSemanticsObjectsVector(builder, numElems)

def GeometryEnd(builder):
    return builder.EndObject()

def End(builder):
    return GeometryEnd(builder)
