# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatCityBuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CityFeature(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CityFeature()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCityFeature(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CityFeature
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CityFeature
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CityFeature
    def Objects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = CityObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CityFeature
    def ObjectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CityFeature
    def ObjectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CityFeature
    def Vertices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            obj = Vertex()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CityFeature
    def VerticesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CityFeature
    def VerticesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def CityFeatureStart(builder):
    builder.StartObject(3)

def Start(builder):
    CityFeatureStart(builder)

def CityFeatureAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    CityFeatureAddId(builder, id)

def CityFeatureAddObjects(builder, objects):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(objects), 0)

def AddObjects(builder, objects):
    CityFeatureAddObjects(builder, objects)

def CityFeatureStartObjectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartObjectsVector(builder, numElems):
    return CityFeatureStartObjectsVector(builder, numElems)

def CityFeatureAddVertices(builder, vertices):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(vertices), 0)

def AddVertices(builder, vertices):
    CityFeatureAddVertices(builder, vertices)

def CityFeatureStartVerticesVector(builder, numElems):
    return builder.StartVector(12, numElems, 4)

def StartVerticesVector(builder, numElems):
    return CityFeatureStartVerticesVector(builder, numElems)

def CityFeatureEnd(builder):
    return builder.EndObject()

def End(builder):
    return CityFeatureEnd(builder)
