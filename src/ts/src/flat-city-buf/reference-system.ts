// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ReferenceSystem {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ReferenceSystem {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReferenceSystem(bb:flatbuffers.ByteBuffer, obj?:ReferenceSystem):ReferenceSystem {
  return (obj || new ReferenceSystem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReferenceSystem(bb:flatbuffers.ByteBuffer, obj?:ReferenceSystem):ReferenceSystem {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ReferenceSystem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

authority():string|null
authority(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
authority(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

code():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

codeString():string|null
codeString(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
codeString(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startReferenceSystem(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addAuthority(builder:flatbuffers.Builder, authorityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, authorityOffset, 0);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(1, version, 0);
}

static addCode(builder:flatbuffers.Builder, code:number) {
  builder.addFieldInt32(2, code, 0);
}

static addCodeString(builder:flatbuffers.Builder, codeStringOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, codeStringOffset, 0);
}

static endReferenceSystem(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createReferenceSystem(builder:flatbuffers.Builder, authorityOffset:flatbuffers.Offset, version:number, code:number, codeStringOffset:flatbuffers.Offset):flatbuffers.Offset {
  ReferenceSystem.startReferenceSystem(builder);
  ReferenceSystem.addAuthority(builder, authorityOffset);
  ReferenceSystem.addVersion(builder, version);
  ReferenceSystem.addCode(builder, code);
  ReferenceSystem.addCodeString(builder, codeStringOffset);
  return ReferenceSystem.endReferenceSystem(builder);
}
}
