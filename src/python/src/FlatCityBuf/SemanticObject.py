# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatCityBuf

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SemanticObject(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SemanticObject()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSemanticObject(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SemanticObject
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SemanticObject
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SemanticObject
    def Attributes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SemanticObject
    def AttributesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SemanticObject
    def AttributesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SemanticObject
    def AttributesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # SemanticObject
    def Children(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SemanticObject
    def ChildrenAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # SemanticObject
    def ChildrenLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SemanticObject
    def ChildrenIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # SemanticObject
    def Parent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return None

def SemanticObjectStart(builder):
    builder.StartObject(4)

def Start(builder):
    SemanticObjectStart(builder)

def SemanticObjectAddType(builder, type):
    builder.PrependUint8Slot(0, type, 0)

def AddType(builder, type):
    SemanticObjectAddType(builder, type)

def SemanticObjectAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def AddAttributes(builder, attributes):
    SemanticObjectAddAttributes(builder, attributes)

def SemanticObjectStartAttributesVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartAttributesVector(builder, numElems):
    return SemanticObjectStartAttributesVector(builder, numElems)

def SemanticObjectAddChildren(builder, children):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(children), 0)

def AddChildren(builder, children):
    SemanticObjectAddChildren(builder, children)

def SemanticObjectStartChildrenVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartChildrenVector(builder, numElems):
    return SemanticObjectStartChildrenVector(builder, numElems)

def SemanticObjectAddParent(builder, parent):
    builder.PrependUint32Slot(3, parent, None)

def AddParent(builder, parent):
    SemanticObjectAddParent(builder, parent)

def SemanticObjectEnd(builder):
    return builder.EndObject()

def End(builder):
    return SemanticObjectEnd(builder)
