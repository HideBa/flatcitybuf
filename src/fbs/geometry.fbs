

enum SemanticSurfaceType:ubyte {
  // Building
  RoofSurface,
  GroundSurface,
  WallSurface,
  ClosureSurface,
  OuterCeilingSurface,
  OuterFloorSurface,
  Window,
  Door,
  InteriorWallSurface,
  CeilingSurface,
  FloorSurface,
  // WaterBody
  WaterSurface,
  WaterGroundSurface,
  WaterClosureSurface,
  // Transportation ("Road", "Railway", "TransportSquare")
  TrafficArea,
  AuxiliaryTrafficArea,
  TransportationMarking,
  TransportationHole

  // Extension objects. In the JSON data, it's written like "+ThermalSurface". However as we can't expect the extended semantic surface type, just mark it as "ExtraSemanticSurface".
  ExtraSemanticSurface
}

enum GeometryType:ubyte {
  MultiPoint,
  MultiLineString,
  MultiSurface,
  CompositeSurface,
  Solid,
  MultiSolid,
  CompositeSolid,
  GeometryInstance
}


table MaterialMapping {
  theme: string;
  solids: [uint];
  shells: [uint];
  vertices: [uint]; // flat list of vertex indices.
  // The depth of material indices will be boundaries depth minus 2:
  // - For MultiSurface/CompositeSurface: one material index per surface
  // - For Solid: one material index per surface in each shell
  // - For MultiSolid/CompositeSolid: one material index per surface in each shell of each solid
  value: uint = null; // used only when it uses the shared material of CityJSON
}

table TextureMapping {
  theme: string;
  solids: [uint];
  shells: [uint];
  surfaces: [uint];
  strings: [uint];
  vertices: [uint]; // flat list of vertex indices.
  // The depth of texture indices matches the boundaries array:
  // - For each ring: first vertex is texture index, remaining vertices are UV coordinate indices
  // - UV coordinates must be between 0.0 and 1.0 and reference vertices_texture array
}

table Geometry {
  type:GeometryType;
  lod:string;

  // these are lengths in the
  // depending on the geometry_type, different fields are used
  solids:[uint];
  shells:[uint];
  surfaces:[uint];
  strings:[uint];           // Rings or LineStrings

  boundaries:[uint];        // flat list of vertex indices

  semantics:[uint];         // flat list of semantic object indices
  semantics_objects:[SemanticObject];

  material: [MaterialMapping]; // Maps each surface/shells to an index in appearance.materials.
  texture: [TextureMapping];   // Maps each primitives to an index in appearance.textures.
}

table SemanticObject {
  type:SemanticSurfaceType;
  attributes:[ubyte];
  children:[uint];
  parent:uint = null;       // default is null, important to be able to check if this field is set
  extension_type: string = null; // extension type of the semantic object. e.g. "+ThermalSurface"
}

struct TransformationMatrix {
  m00:double;
  m01:double;
  m02:double;
  m03:double;
  m10:double;
  m11:double;
  m12:double;
  m13:double;
  m20:double;
  m21:double;
  m22:double;
  m23:double;
  m30:double;
  m31:double;
  m32:double;
  m33:double;
}

table GeometryInstance {
  // "type": "GeometryInstance" isn't written in the file as it's obvious
  transformation: TransformationMatrix;
  template: uint;
  boundaries: [uint]; //contains only one vertex index of vertices. "referencePoint" of CityGML
}
