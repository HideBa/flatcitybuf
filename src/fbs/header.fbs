// namespace FlatCityBuf;

// Reference: https://github.com/Ylannl/CityBuf/blob/main/CityBufHeader.fbs
// Reference: https://github.com/flatgeobuf/flatgeobuf/blob/master/src/fbs/header.fbs


enum ColumnType: ubyte {
  Byte,                         // Signed 8-bit integer
  UByte,                        // Unsigned 8-bit integer
  Bool,                         // Boolean
  Short,                        // Signed 16-bit integer
  UShort,                       // Unsigned 16-bit integer
  Int,                          // Signed 32-bit integer
  UInt,                         // Unsigned 32-bit integer
  Long,                         // Signed 64-bit integer
  ULong,                        // Unsigned 64-bit integer
  Float,                        // Single precision floating point number
  Double,                       // Double precision floating point number
  String,                       // UTF8 string
  Json,                         // General JSON type intended to be application specific
  DateTime,                     // ISO 8601 date time
  Binary                        // General binary type intended to be application specific
  // Array                         // Array of values
}

table Column {
  index: ushort;                // Column index (0 = first column) This index is used to identify the column in the FlatBuffer. The reason why index is used instead of column name is to save more space on attribute field.
  name: string (required);      // Column name
  type: ColumnType;             // Column type
  title: string;                // Column title
  description: string;          // Column description (intended for free form long text)
  precision: int = -1;          // Column values expected precision (-1 = unknown) as defined by SQL
  scale: int = -1;              // Column values expected scale (-1 = unknown) as defined by SQL
  nullable: bool = true;        // Column values expected nullability
  unique: bool = false;         // Column values expected uniqueness
  primary_key: bool = false;    // Indicates this column has been (part of) a primary key
  metadata: string;             // Column metadata (intended to be application specific and suggested to be structured fx. JSON)
}

table ReferenceSystem {
  authority: string;            // Case-insensitive name of the defining organization e.g. EPSG or epsg (NULL = EPSG)
  version: int;                 // Version of the Spatial Reference System assigned by the organization (0 = not defined)
  code: int;                    // Numeric ID of the Spatial Reference System assigned by the organization (0 = unknown)
  code_string: string;          // Text ID of the Spatial Reference System assigned by the organization in the (rare) case when it is not an integer and thus cannot be set into code
}

struct Vector {
  x:double;
  y:double;
  z:double;
}

struct Transform {
  scale: Vector;
  translate: Vector;
}

struct GeographicalExtent {
  min: Vector;
  max: Vector;
}

struct AttributeIndex {
  index: ushort;
  length: uint;
}

struct Vec2 {
  u: double;
  v: double;
}

table Material {
  name: string (required);
  ambient_intensity: double = null; // from 0.0 to 1.0
  // Expected to contain 3 items from 0.0 to 1.0 for (RGB); implementations MUST check length.
  diffuse_color: [double];
  emissive_color: [double];
  specular_color: [double];
  shininess: double = null; // from 0.0 to 1.0
  transparency: double = null; // from 0.0 to 1.0
  is_smooth: bool = null;
}

enum TextureFormat:ubyte {
  PNG,
  JPG
}

enum WrapMode:ubyte {
  None,
  Wrap,
  Mirror,
  Clamp,
  Border
}

enum TextureType:ubyte {
  Unknown,
  Specific,
  Typical
}

table Texture {
  type: TextureFormat; // NOTICE: "type" fields refers to TextureFormat while "textureType" refers to TextureType.
  image: string (required);        // Image file name / URL
  wrap_mode: WrapMode = null;
  texture_type: TextureType = null;  // e.g., "unknown", "specific", or "typical"
  // Expected to contain 4 items (RGBA)
  border_color: [double]; // from 0.0 to 1.0 for (RGBA)
}

table Appearance {
  materials: [Material];
  textures: [Texture];
  vertices_texture: [Vec2];  // List of UV coordinates, each coordinate must be between 0.0 and 1.0
  default_theme_texture: string;  // Default theme name for textures when multiple themes exist
  default_theme_material: string; // Default theme name for materials when multiple themes exist
}

table Header {
  transform: Transform;                     // Transformation vectors
  appearance: Appearance;                   // Appearance object for materials and textures
  columns: [Column];                        // Attribute columns schema (can be omitted if per feature schema)
  features_count: ulong;                    // Number of features in the dataset (0 = unknown)
  index_node_size: ushort = 16;          // Index node size (0 = no index)
  attribute_index: [AttributeIndex];
  // metadata
  geographical_extent: GeographicalExtent;  // Bounds
  reference_system: ReferenceSystem;        // Spatial Reference System
  identifier: string;                       // Dataset identifier
  reference_date: string;                   // Reference date
  title: string;                            // Dataset title
  poc_contact_name: string;                 // Point of contact name
  poc_contact_type: string;                 // Point of contact type
  poc_role: string;                         // Point of contact role
  poc_phone: string;                        // Point of contact phone
  poc_email: string;                        // Point of contact email
  poc_website: string;                      // Point of contact website
  poc_address_thoroughfare_number: string;  // Point of contact address thoroughfare number
  poc_address_thoroughfare_name: string;    // Point of contact address thoroughfare name
  poc_address_locality: string;             // Point of contact address locality
  poc_address_postcode: string;             // Point of contact address postcode
  poc_address_country: string;              // Point of contact address country
  attributes: [ubyte];                      // Other attributes that are stored in root CityJSON object
  version: string (required);               // CityJSON version
}

root_type Header;
