// Description: FlatBuffers schema for CityBuf feature format. Original schema is authored by TU Delft 3D geoinformation group, Ravi Peters (3DGI), Balazs Dukai (3DGI)
// Reference: https://github.com/3DBAG/CityBuf/blob/main/CityBufFeature.fbs


include "header.fbs";

// namespace FlatCityBuf;

enum CityObjectType:ubyte {
  Bridge,
  BridgePart,
  BridgeInstallation,
  BridgeConstructiveElement,
  BridgeRoom,
  BridgeFurniture,

  Building,
  BuildingPart,
  BuildingInstallation,
  BuildingConstructiveElement,
  BuildingFurniture,
  BuildingStorey,
  BuildingRoom,
  BuildingUnit,

  CityFurniture,
  CityObjectGroup,
  GenericCityObject,
  LandUse,
  OtherConstruction,
  PlantCover,
  SolitaryVegetationObject,
  TINRelief,

  // Transportation objects
  Road,
  Railway,
  Waterway,
  TransportSquare,

  Tunnel,
  TunnelPart,
  TunnelInstallation,
  TunnelConstructiveElement,
  TunnelHollowSpace,
  TunnelFurniture,

  WaterBody
}

enum SemanticSurfaceType:ubyte {
  // Building
  RoofSurface,
  GroundSurface,
  WallSurface,
  ClosureSurface,
  OuterCeilingSurface,
  OuterFloorSurface,
  Window,
  Door,
  InteriorWallSurface,
  CeilingSurface,
  FloorSurface,
  // WaterBody
  WaterSurface,
  WaterGroundSurface,
  WaterClosureSurface,
  // Transportation ("Road", "Railway", "TransportSquare")
  TrafficArea,
  AuxiliaryTrafficArea,
  TransportationMarking,
  TransportationHole
}

enum GeometryType:ubyte {
  MultiPoint,
  MultiLineString,
  MultiSurface,
  CompositeSurface,
  Solid,
  MultiSolid,
  CompositeSolid
}

struct Vertex {
  x:int;
  y:int;
  z:int;
}

struct Vec2 {
  u: float;
  v: float;
}

table Material {
  name: string (required);
  ambientIntensity: float = 0.0; // from 0.0 to 1.0
  // Expected to contain 3 items from 0.0 to 1.0 for (RGB); implementations MUST check length.
  diffuseColor: [float];
  emissiveColor: [float];
  specularColor: [float];
  shininess: float = 0.0; // from 0.0 to 1.0
  transparency: float = 0.0; // from 0.0 to 1.0
  isSmooth: bool = false;
}

enum TextureType:ubyte {
  PNG,
  JPG
}

enum WrapMode:ubyte {
  None,
  Wrap,
  Mirror,
  Clamp,
  Border
}

enum TextureType:ubyte {
  Unknown,
  Specific,
  Typical
}

table Texture {
  type: TextureType;
  image: string;        // Image file name / URL
  wrapMode: WrapMode;
  textureType: TextureType;  // e.g., "unknown", "specific", or "typical"
  // Expected to contain 4 items (RGBA)
  borderColor: [float]; // from 0.0 to 1.0 for (RGBA)
}

table MaterialMapping {
  theme: string;
  solids: [uint];
  shells: [uint];
  vertices: [uint]; // flat list of vertex indices.
  //It also contains the material index. The depth of the material will be minus 2 of the boundaryies array. For more details see https://www.cityjson.org/specs/2.0.1/#geometry-object-having-material-s
}

table TextureMapping {
  theme: string;
  solids: [uint];
  shells: [uint];
  surfaces: [uint];
  strings: [uint];
  vertices: [uint]; // flat list of vertex indices.
  //It also contains the texture index. The depth of the texture will be same as the boundaries array. For more details see https://www.cityjson.org/specs/2.0.1/#geometry-object-having-texture-s
}

table Appearance {
  materials: [Material];
  textures: [Texture];
  // "vertices-texture" field: a list of UV coordinates.
  vertices_texture: [Vec2];
  default_theme_texture: string;
  default_theme_material: string;
}

table CityFeature {
  id:string (key, required);
  objects:[CityObject];
  vertices:[Vertex];
  appearance: Appearance;
}

table CityObject {
  type:CityObjectType;
  id:string (key, required);
  geographical_extent:GeographicalExtent;
  geometry:[Geometry];
  attributes:[ubyte];
  columns:[Column];         // Attribute columns schema (optional, if set it should be used instead of the header columns)
  children:[string];
  children_roles:[string];  // for CityObjectGroup only
  parents:[string];
}

table Geometry {
  type:GeometryType;
  lod:string;

  // these are lengths in the
  // depending on the geometry_type, different fields are used
  solids:[uint];
  shells:[uint];
  surfaces:[uint];
  strings:[uint];           // Rings or LineStrings

  boundaries:[uint];        // flat list of vertex indices

  semantics:[uint];         // flat list of semantic object indices
  semantics_objects:[SemanticObject];

  material: [MaterialMapping]; // Maps each surface/shells to an index in appearance.materials.
  texture: [TextureMapping];   // Maps each primitives to an index in appearance.textures.
}

table SemanticObject {
  type:SemanticSurfaceType;
  attributes:[ubyte];
  children:[uint];
  parent:uint = null;       // default is null, important to be able to check if this field is set
}

root_type CityFeature;