// Description: FlatBuffers schema for CityBuf feature format. Original schema is authored by TU Delft 3D geoinformation group, Ravi Peters (3DGI), Balazs Dukai (3DGI)
// Reference: https://github.com/3DBAG/CityBuf/blob/main/CityBufFeature.fbs


include "header.fbs";

// namespace FlatCityBuf;

enum CityObjectType:ubyte {
  Bridge,
  BridgePart,
  BridgeInstallation,
  BridgeConstructiveElement,
  BridgeRoom,
  BridgeFurniture,

  Building,
  BuildingPart,
  BuildingInstallation,
  BuildingConstructiveElement,
  BuildingFurniture,
  BuildingStorey,
  BuildingRoom,
  BuildingUnit,

  CityFurniture,
  CityObjectGroup,
  GenericCityObject,
  LandUse,
  OtherConstruction,
  PlantCover,
  SolitaryVegetationObject,
  TINRelief,

  // Transportation objects
  Road,
  Railway,
  Waterway,
  TransportSquare,

  Tunnel,
  TunnelPart,
  TunnelInstallation,
  TunnelConstructiveElement,
  TunnelHollowSpace,
  TunnelFurniture,

  WaterBody
}

enum SemanticSurfaceType:ubyte {
  // Building
  RoofSurface,
  GroundSurface,
  WallSurface,
  ClosureSurface,
  OuterCeilingSurface,
  OuterFloorSurface,
  Window,
  Door,
  InteriorWallSurface,
  CeilingSurface,
  FloorSurface,
  // WaterBody
  WaterSurface,
  WaterGroundSurface,
  WaterClosureSurface,
  // Transportation ("Road", "Railway", "TransportSquare")
  TrafficArea,
  AuxiliaryTrafficArea,
  TransportationMarking,
  TransportationHole
}

enum GeometryType:ubyte {
  MultiPoint,
  MultiLineString,
  MultiSurface,
  CompositeSurface,
  Solid,
  MultiSolid,
  CompositeSolid
}

struct Vertex {
  x:int;
  y:int;
  z:int;
}

table MaterialMapping {
  theme: string;
  solids: [uint];
  shells: [uint];
  vertices: [uint]; // flat list of vertex indices.
  // The depth of material indices will be boundaries depth minus 2:
  // - For MultiSurface/CompositeSurface: one material index per surface
  // - For Solid: one material index per surface in each shell
  // - For MultiSolid/CompositeSolid: one material index per surface in each shell of each solid
}

table TextureMapping {
  theme: string;
  solids: [uint];
  shells: [uint];
  surfaces: [uint];
  strings: [uint];
  vertices: [uint]; // flat list of vertex indices.
  // The depth of texture indices matches the boundaries array:
  // - For each ring: first vertex is texture index, remaining vertices are UV coordinate indices
  // - UV coordinates must be between 0.0 and 1.0 and reference vertices_texture array
}

table Appearance {
  materials: [Material];
  textures: [Texture];
  vertices_texture: [Vec2];  // List of UV coordinates, each coordinate must be between 0.0 and 1.0
  default_theme_texture: string;  // Default theme name for textures when multiple themes exist
  default_theme_material: string; // Default theme name for materials when multiple themes exist
}

table CityFeature {
  id:string (key, required);
  objects:[CityObject];
  vertices:[Vertex];
  appearance: Appearance;
}

table CityObject {
  type:CityObjectType;
  id:string (key, required);
  geographical_extent:GeographicalExtent;
  geometry:[Geometry];
  attributes:[ubyte];
  columns:[Column];         // Attribute columns schema (optional, if set it should be used instead of the header columns)
  children:[string];
  children_roles:[string];  // for CityObjectGroup only
  parents:[string];
}

table Geometry {
  type:GeometryType;
  lod:string;

  // these are lengths in the
  // depending on the geometry_type, different fields are used
  solids:[uint];
  shells:[uint];
  surfaces:[uint];
  strings:[uint];           // Rings or LineStrings

  boundaries:[uint];        // flat list of vertex indices

  semantics:[uint];         // flat list of semantic object indices
  semantics_objects:[SemanticObject];

  material: [MaterialMapping]; // Maps each surface/shells to an index in appearance.materials.
  texture: [TextureMapping];   // Maps each primitives to an index in appearance.textures.
}

table SemanticObject {
  type:SemanticSurfaceType;
  attributes:[ubyte];
  children:[uint];
  parent:uint = null;       // default is null, important to be able to check if this field is set
}

root_type CityFeature;
